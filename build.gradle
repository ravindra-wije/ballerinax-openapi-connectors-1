import org.ballerinax.openapi.validator.Utils

buildscript {
    dependencies {
        classpath files("libs/ballerinax-openapi-validator-1.0-SNAPSHOT-all.jar")
    }
}

plugins {
    id 'java'
    id 'java-library'
    id "com.github.spotbugs" version "${githubSpotbugsVersion}"
    id "com.github.johnrengelman.shadow" version "${githubJohnrengelmanShadowVersion}"
    id "de.undercouch.download" version "${underCouchDownloadVersion}"
    id "net.researchgate.release" version "${researchgateReleaseVersion}"
    id "com.jfrog.artifactory" version "4.4.18"
}

apply plugin: 'jacoco'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'maven-publish'

def ballerinaDistributionPath = System.getenv("BALLERINA_HOME");
List<String> ballerinaPackages = new ArrayList<>();
List<String> updatedBallerinaPackages = new ArrayList<>();
boolean release = new Boolean(project.property("release").toString())
boolean isPublishing = new Boolean(project.property("publishing").toString())
boolean remote = false;
if (project.hasProperty("remote")){
    remote = new Boolean(project.property("remote").toString())
}

Utils.loadOpenAPIProperties(project.projectDir.absolutePath)
String openApiPackageDirPath = project.projectDir.absolutePath + "/openapi";
updatedBallerinaPackages = Utils.findUpdatedBallerinaPackages(openApiPackageDirPath);
ballerinaPackages = Utils.findBallerinaPackages(openApiPackageDirPath);

if (isPublishing){
    updatedBallerinaPackages = ballerinaPackages;
}

// TODO: Remove this cleanup task once the file override enabled
// task cleanup {
//     println "Cleaning up generated code..."
//     Utils.loadOpenAPIProperties(project.projectDir.absolutePath)
//     updatedBallerinaPackages.each {
//         dir->exec{
//             commandLine 'sh', '-c', "find ${dir} -name '*.bal' -type f -delete"
//         }
//     }
//     updatedBallerinaPackages.each {
//         dir->exec{
//             commandLine 'sh', '-c', "find ${dir} -name 'target' -type d -exec rm -rf {} +"
//         }
//     }
//     updatedBallerinaPackages.each {
//         dir->exec{
//             commandLine 'sh', '-c', "find ${dir} -name 'resources' -type d -exec rm -rf {} +"
//         }
//     }
// }

// task codegen {
//     Utils.loadOpenAPIProperties(project.projectDir.absolutePath)
//     updatedBallerinaPackages = Utils.findUpdatedBallerinaPackages(project.projectDir.absolutePath)

//     exec {
//         commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal dist use slbeta1"
//     }

//     for(String updatedPackagePath : updatedBallerinaPackages){
//         List<String> updatedYamlFiles = Utils.findOpenAPIs(updatedPackagePath);
//         println "Code generation..."
//         updatedYamlFiles.each {
//             file->exec{
//                 commandLine 'bash', '-c', "${ballerinaDistributionPath}/bin/bal openapi -i ${file} --mode client -o ${updatedPackagePath}"
//             }
//         }
//     }

//     // Pulling slalpha5 distribution if not available
//     if (project.hasProperty("remote") ) {
//         if (remote) {
//             exec {
//                 commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal dist pull slalpha5"
//             }

//             exec {
//                 commandLine 'sh', '-c', "rm -rf ${ballerinaDistributionPath}/bin/../dependencies/jdk-11.0.8+10-jre"
//             }
//         }
//     }

//     // Changing the build distribution to SL Alpha5
//     exec {
//         commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal dist use slalpha5"
//     }


//     for (String path : updatedBallerinaPackages) {
//         println "Code building..."
//         exec {
//             commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal build -c ${path}"
//         }
//     }

//     for (String path : updatedBallerinaPackages) {

//         if (!release) {
//             exec {
//                 workingDir "${path}"
//                 commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal push --repository=local"
//             }
//         }
//     }
// }

// Temporarily added.
task codeBuild {
    // Pulling slalpha5 distribution if not available
    if (project.hasProperty("remote") ) {
        if (remote) {
            exec {
                commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal dist pull slalpha5"
            }

            exec {
                commandLine 'sh', '-c', "rm -rf ${ballerinaDistributionPath}/bin/../dependencies/jdk-11.0.8+10-jre"
            }
        }
    }

    // Changing the build distribution to SL Alpha5
    exec {
        commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal dist use slalpha5"
    }
    for (String path : updatedBallerinaPackages) {
        println "Code building..."
        exec {
            commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal build -c ${path}"
        }
    }
}

task releaseConnector {
    
    if (project.hasProperty("release") ) {
        if(release){
            for (String path : updatedBallerinaPackages) {
                Utils.removeSnapshotSuffixFromVersion(path);
                println "Pushing to Ballerina central..."
                exec {
                    workingDir "${path}"
                    commandLine 'sh', '-c', "${ballerinaDistributionPath}/bin/bal push"
                }
                Utils.addSnapshotSuffixToVersion(path);
                print "Updating Ballerina.toml version: "
                Utils.bumpBallerinaTomlVersion(path);
                println "Success"
            }
            print "Updating package hashes: "
            Utils.writeUpdatedFileHashes(project.projectDir.absolutePath, updatedBallerinaPackages)
            println "Success"
        }
    }
}

def packageOrg = "ballerinax"
def platform = "java11"
def artifactCacheParent = file("${project.projectDir}/build/cache_parent/")


def packageName = "";
def packageVersion = "";


task copyDistribution {
    if (isPublishing) {
        for(String packagePath: ballerinaPackages) {
            packageName = Utils.getPackageName(packagePath);
            packageVersion = Utils.getPackageVersion(packagePath);
            mkdir "${project.projectDir}/openapi/${packageName}/target/bala"
            def pathToBala = file("${project.projectDir}/openapi/${packageName}/target/bala")

            inputs.dir file(project.projectDir)
            pathToBala.eachFileMatch(~/.*.bala/) { balaFile ->
                copy {
                    from zipTree(balaFile)
                    into file("${artifactCacheParent}/bala/${packageOrg}/${packageName}/${packageVersion}/${platform}")
                }
            }
            copy {
                from file("${packagePath}/target/cache")
                exclude '**/*-testable.jar'
                exclude '**/tests_cache/'
                into file("${artifactCacheParent}/cache/")
            }
            outputs.dir artifactCacheParent
        }
    }
}

task createArtifactZip(type: Zip) {
    println("Create Zip Artifact");
    from "${buildDir}/cache_parent"
    archiveName 'distribution.zip'
    destinationDir(file("${buildDir}/distribution"))
}

publishing {
    if (isPublishing){
        println("Package published");
        publications {
            mavenJava(MavenPublication) {
                artifact source: createArtifactZip, extension: 'zip'
            }
        }

        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/ravindra-wije/ballerinax-openapi-connectors-1")
                credentials {
                    username = System.getenv("publishUser")
                    password = System.getenv("publishPAT")
                }
            }
        }
    }
}

publish.dependsOn copyDistribution
